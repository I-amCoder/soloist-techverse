@model AspnetCoreMvcFull.Models.ViewModels.PublicItemsViewModel
@{
    ViewData["Title"] = "Browse Items - Campus Compass";
    Layout = "_BlankLayout";
}

<style>
    .filter-section {
        background: white;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        margin-bottom: 30px;
    }
    
    .item-card {
        border: none;
        border-radius: 15px;
        overflow: hidden;
        transition: all 0.3s ease;
        height: 100%;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
    }
    
    .item-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.15);
    }
    
    .item-image {
        height: 200px;
        object-fit: cover;
    }
    
    .item-placeholder {
        height: 200px;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 3rem;
        color: #6c757d;
    }
    
    .pagination-wrapper {
        background: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
    }
</style>

<div class="container my-4">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h1>Browse Items</h1>
            <p class="text-muted">
                @if (!string.IsNullOrEmpty(Model.CurrentType))
                {
                    <span>Showing @Model.CurrentType.ToLower() items</span>
                }
                else
                {
                    <span>Discover lost and found items on campus</span>
                }
            </p>
        </div>
        <div class="col-md-4 text-end">
            <div class="btn-group" role="group">
                <a asp-controller="Items" asp-action="PostLost" class="btn btn-danger">
                    <i class="bx bx-search me-1"></i>Report Lost
                </a>
                <a asp-controller="Items" asp-action="PostFound" class="btn btn-success">
                    <i class="bx bx-check-circle me-1"></i>Report Found
                </a>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="filter-section">
        <form method="get" class="row g-3">
            <div class="col-md-2">
                <label class="form-label">Type</label>
                <select name="type" class="form-select">
                    <option value="">All Types</option>
                    <option value="Lost" selected="@(Model.CurrentType == "Lost")">Lost Items</option>
                    <option value="Found" selected="@(Model.CurrentType == "Found")">Found Items</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Category</label>
                <select name="category" class="form-select">
                    <option value="">All Categories</option>
                    @foreach (ItemCategory cat in Enum.GetValues<ItemCategory>())
                    {
                        <option value="@cat" selected="@(Model.CurrentCategory == cat.ToString())">@cat</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Search</label>
                <input type="text" name="search" class="form-control" placeholder="Search by name, description, or location..." value="@Model.CurrentSearch">
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button type="submit" class="btn btn-primary w-100">
                    <i class="bx bx-search me-1"></i>Filter
                </button>
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <a asp-action="Items" class="btn btn-outline-secondary w-100">
                    <i class="bx bx-x me-1"></i>Clear
                </a>
            </div>
        </form>
    </div>

    <!-- Results Summary -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h5>Found @Model.TotalItems items</h5>
            @if (!string.IsNullOrEmpty(Model.CurrentSearch) || !string.IsNullOrEmpty(Model.CurrentType) || !string.IsNullOrEmpty(Model.CurrentCategory))
            {
                <div class="mt-2">
                    @if (!string.IsNullOrEmpty(Model.CurrentType))
                    {
                        <span class="badge bg-primary me-2">Type: @Model.CurrentType</span>
                    }
                    @if (!string.IsNullOrEmpty(Model.CurrentCategory))
                    {
                        <span class="badge bg-secondary me-2">Category: @Model.CurrentCategory</span>
                    }
                    @if (!string.IsNullOrEmpty(Model.CurrentSearch))
                    {
                        <span class="badge bg-info me-2">Search: "@Model.CurrentSearch"</span>
                    }
                </div>
            }
        </div>
        <div class="text-muted">
            Page @Model.CurrentPage of @Model.TotalPages
        </div>
    </div>

    <!-- Items Grid -->
    @if (Model.Items.Any())
    {
        <div class="row">
            @foreach (var item in Model.Items)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card item-card h-100">
                        @if (!string.IsNullOrEmpty(item.ImagePath))
                        {
                            <img src="@item.ImagePath" class="card-img-top item-image" alt="@item.Name">
                        }
                        else
                        {
                            <div class="card-img-top item-placeholder">
                                <i class="bx bx-image"></i>
                            </div>
                        }
                        
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <span class="badge bg-@item.TypeBadgeClass">
                                    <i class="bx @item.TypeIcon me-1"></i>
                                    @item.Type
                                </span>
                                <span class="badge bg-secondary">@item.Category</span>
                            </div>
                            
                            <h6 class="card-title">@item.Name</h6>
                            <p class="card-text text-muted small flex-grow-1">@item.ShortDescription</p>
                            
                            <div class="item-meta mb-3">
                                <small class="text-muted d-block">
                                    <i class="bx bx-map-pin me-1"></i>@item.Location
                                </small>
                                <small class="text-muted d-block">
                                    <i class="bx bx-time me-1"></i>@item.DaysAgo days ago
                                </small>
                                <small class="text-muted d-block">
                                    <i class="bx bx-user me-1"></i>by @item.ReporterName
                                </small>
                            </div>
                            
                            <a href="@Url.Action("Preview", "Home", new { id = item.Id })"
                               class="btn btn-outline-primary btn-sm w-100">
                                <i class="bx bx-show me-1"></i>View Details
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="pagination-wrapper text-center">
                <nav>
                    <ul class="pagination justify-content-center mb-0">
                        @if (Model.HasPreviousPage)
                        {
                            <li class="page-item">
                                <a class="page-link" asp-route-page="@(Model.CurrentPage - 1)" asp-route-type="@Model.CurrentType" asp-route-category="@Model.CurrentCategory" asp-route-search="@Model.CurrentSearch">
                                    <i class="bx bx-chevron-left"></i> Previous
                                </a>
                            </li>
                        }
                        
                        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" asp-route-page="@i" asp-route-type="@Model.CurrentType" asp-route-category="@Model.CurrentCategory" asp-route-search="@Model.CurrentSearch">@i</a>
                            </li>
                        }
                        
                        @if (Model.HasNextPage)
                        {
                            <li class="page-item">
                                <a class="page-link" asp-route-page="@(Model.CurrentPage + 1)" asp-route-type="@Model.CurrentType" asp-route-category="@Model.CurrentCategory" asp-route-search="@Model.CurrentSearch">
                                    Next <i class="bx bx-chevron-right"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <i class="bx bx-search display-1 text-muted"></i>
            <h4 class="mt-3">No items found</h4>
            <p class="text-muted">Try adjusting your filters or search terms</p>
            <a asp-action="Items" class="btn btn-primary">
                <i class="bx bx-refresh me-2"></i>Clear Filters
            </a>
        </div>
    }
</div> 